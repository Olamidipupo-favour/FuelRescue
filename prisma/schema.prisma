// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  directUrl    = env("DATABASE_URL") // Used for direct connection
  relationMode = "prisma"
}

enum Role {
  ADMIN
  DRIVER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum VehicleType {
  CAR
  TRUCK
  MOTORCYCLE
  OTHER
}

enum FuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
  OTHER
}

enum ServiceRequestStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  MOBILE_PAYMENT
  CASH
}

model User {
  id                      String     @id @default(auto()) @map("_id") @db.ObjectId
  email                   String     @unique
  password                String
  firstName               String
  lastName                String
  phone                   String?    @unique
  profilePicture          String?
  address                 String?
  city                    String?
  state                   String?
  zip                     String?
  country                 String?
  verificationCode        String?
  verificationCodeExpires DateTime?
  repaymentOnTime         Boolean    @default(true)
  kycVerified             Boolean    @default(true)
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  role                    Role       @default(USER)
  status                  UserStatus @default(ACTIVE)


  // Metadata for flexible extensions
  metadata Json?

  // Relationships
  vehicles          Vehicle[]
  serviceRequests   ServiceRequest[]   @relation("requestedBy")
  driver            Driver?
  reviews           Review[]           @relation("reviewedBy")
  receivedReviews   Review[]           @relation("reviewOf")
  payments          Payment[]
  notifications     Notification[]
  favoriteDrivers   FavoriteDriver[]   @relation("userFavorites")
  favoritedBy       FavoriteDriver[]   @relation("driverFavorited")
  emergencyContacts EmergencyContact[]
  Session           Session[]
  Order             Order[]
}

model Driver {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @unique @db.ObjectId
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseNumber      String
  licenseExpiry      DateTime
  isAvailable        Boolean   @default(false)
  currentLocation    Location?
  rating             Float?
  completedServices  Int       @default(0)
  verificationStatus String    @default("PENDING")

  // Documents and verification
  identityVerified      Boolean   @default(false)
  backgroundCheckStatus String?
  insurancePolicy       String?
  insuranceExpiry       DateTime?

  // Service-related
  serviceRadius    Float?   @default(20) // in kilometers
  serviceFuelTypes String[] // Array of fuel types

  // Flexible extensions
  qualifications String[]
  metadata       Json?

  // Relationships
  serviceRequests       ServiceRequest[]             @relation("assignedTo")
  reviews               Review[]                     @relation("reviewOf")
  payments              Payment[]                    @relation("receivedBy")
  favoriteOf            FavoriteDriver[]             @relation("userFavorites")
  availabilitySchedules DriverAvailabilitySchedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Vehicle {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @db.ObjectId
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  nickname     String?
  make         String
  model        String
  year         Int
  color        String?
  licensePlate String?
  vehicleType  VehicleType
  fuelType     FuelType

  // Additional info for better service
  tankCapacity    Float? // in liters/gallons
  fuelConsumption Float? // average consumption

  // Flexible extensions
  specifications Json?
  metadata       Json?

  // Relationships
  serviceRequests ServiceRequest[]

  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  latitude  Float
  longitude Float
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?

  // References
  driverId String? @unique @db.ObjectId
  driver   Driver? @relation(fields: [driverId], references: [id])

  // Service request locations
  pickupRequests ServiceRequest[] @relation("pickupLocation")

  updatedAt DateTime @updatedAt
  Order     Order[]
}

model ServiceRequest {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  requesterId String  @db.ObjectId
  requester   User    @relation("requestedBy", fields: [requesterId], references: [id])
  vehicleId   String  @db.ObjectId
  vehicle     Vehicle @relation(fields: [vehicleId], references: [id])

  // Locations
  pickupLocationId String   @db.ObjectId
  pickupLocation   Location @relation("pickupLocation", fields: [pickupLocationId], references: [id])

  // Driver assignment
  driverId String? @db.ObjectId
  driver   Driver? @relation("assignedTo", fields: [driverId], references: [id])

  // Service details
  status     ServiceRequestStatus @default(PENDING)
  fuelType   FuelType
  fuelAmount Float // in liters/gallons
  fuelPrice  Float? // unit price at the time of service
  totalPrice Float?
  notes      String?

  // Schedulingdjvpn
  requestedAt  DateTime  @default(now())
  scheduledFor DateTime? // For scheduled deliveries
  acceptedAt   DateTime?
  completedAt  DateTime?
  cancelledAt  DateTime?

  // Flexible extensions for future features
  additionalServices String[]
  metadata           Json?

  // Relationships
  payment Payment?
  review  Review?

  updatedAt DateTime @updatedAt
}

model Payment {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  serviceRequestId String?         @unique @db.ObjectId
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  userId           String          @db.ObjectId
  user             User            @relation(fields: [userId], references: [id])
  driverId         String?         @db.ObjectId
  driver           Driver?         @relation("receivedBy", fields: [driverId], references: [id])

  // Payment details
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod

  // Transaction information
  transactionId      String?
  paymentProviderRef String?
  invoiceNumber      String?

  // Receipts and documentation
  receiptUrl String?

  // Flexible extensions for future payment methods
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Review {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  serviceRequestId String?         @unique @db.ObjectId
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])

  // Reviewer (User)
  reviewerId String @db.ObjectId
  reviewer   User   @relation("reviewedBy", fields: [reviewerId], references: [id])

  // Reviewed Entity (Driver)
  reviewedId String @db.ObjectId
  reviewed   User   @relation("reviewOf", fields: [reviewedId], references: [id])

  // Driver relation
  driverId String? @db.ObjectId
  driver   Driver? @relation("reviewOf", fields: [driverId], references: [id])

  // Review details
  rating  Float // 1-5 star rating
  comment String?

  // Flexible categorization for detailed reviews
  categoryRatings Json? // E.g. {promptness: 4, professionalism: 5}

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Notification details
  type    String // e.g., "SERVICE_REQUEST", "PAYMENT", "SYSTEM"
  title   String
  message String
  isRead  Boolean @default(false)

  // For deep linking within the app
  actionUrl String?

  // For flexible notification data
  metadata Json?

  createdAt DateTime @default(now())
}

model FavoriteDriver {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // The user who favorited
  userId String @db.ObjectId
  user   User   @relation("userFavorites", fields: [userId], references: [id], onDelete: Cascade)

  // The favorited driver (via user ID)
  favoritedUserId String @db.ObjectId
  favoritedUser   User   @relation("driverFavorited", fields: [favoritedUserId], references: [id], onDelete: Cascade)

  // The driver record
  driverId String @db.ObjectId
  driver   Driver @relation("userFavorites", fields: [driverId], references: [id], onDelete: Cascade)

  notes     String?
  createdAt DateTime @default(now())

  @@unique([userId, driverId])
}

model EmergencyContact {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name               String
  phone              String
  relationship       String?
  isEmergencyContact Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppSettings {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  key         String  @unique
  value       Json
  description String?
  isPublic    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DriverAvailabilitySchedule {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  driverId String @db.ObjectId
  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  dayOfWeek   Int // 0-6 (Sunday-Saturday)
  startTime   String // Format: "HH:MM"
  endTime     String // Format: "HH:MM"
  isAvailable Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([driverId, dayOfWeek, startTime, endTime])
}

model PriceConfiguration {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fuelType  FuelType
  basePrice Float // Base price per unit (liter/gallon)

  //delivery mode
  deliveryMode DeliveryMode @default(STANDARD)

  // Dynamic pricing factors
  serviceFee  Float  @default(0)
  distanceFee Float? // Fee per km/mile
  urgencyFee  Float? // Additional fee for urgent requests

  // Discounts
  discountThreshold Float? // Threshold for volume discount
  discountRate      Float? // Discount percentage

  // Time-based pricing
  peakHourSurcharge Float?
  peakStartHour     Int?
  peakEndHour       Int?

  // Flexible extension
  metadata Json?

  isActive      Boolean   @default(true)
  effectiveFrom DateTime  @default(now())
  effectiveTo   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id, userId])
}

model Order {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Order details
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  totalAmount Float
  currency    String      @default("USD")

  // Optional driver assignment
  driverId String? @db.ObjectId
  driver   Driver? @relation(fields: [driverId], references: [id])

  // Location information
  deliveryLocationId String?   @db.ObjectId
  deliveryLocation   Location? @relation(fields: [deliveryLocationId], references: [id])

  // Order items (could be fuel, products, etc.)
  items OrderItem[]

  // Payment relation
  payment Payment? @relation(fields: [paymentId], references: [id])

  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  scheduledFor DateTime?
  completedAt  DateTime?
  cancelledAt  DateTime?

  // Additional metadata
  notes     String?
  metadata  Json?
  paymentId String? @db.ObjectId
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum DeliveryMode {
  STANDARD
  SCHEDULED
  EMERGENCY
}

model OrderItem {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Item details
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float

  // Optional product/service reference
  productId String?
  serviceId String?

  // Additional metadata
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
